{"version":3,"sources":["App.js","index.js"],"names":["App","_useState","useState","_useState2","Object","slicedToArray","postgresql","setPostgresql","_useState3","_useState4","inputValue","setInputValue","react_default","a","createElement","id","onSubmit","event","preventDefault","current","qStr","replace","concat","toConsumableArray","value","type","onChange","target","map","item","onClick","document","getElementById","innerHTML","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"0MAsDeA,MAlDf,WAAe,IAAAC,EACuBC,mBAAS,IAAGC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAAzCK,EAAUH,EAAA,GAAEI,EAAaJ,EAAA,GAAAK,EACIN,mBAAS,IAAGO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAAzCE,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAyBhC,OACEG,EAAAC,EAAAC,cAAA,OAAKC,GAAG,aACNH,EAAAC,EAAAC,cAAA,KAAGC,GAAG,SAAO,mBACbH,EAAAC,EAAAC,cAAA,QAAMC,GAAG,eAAeC,SAvBP,SAACC,GACpBA,EAAMC,iBACNX,EAAc,SAACY,GACb,IAAIC,EAAOV,EAOX,OALAU,EAAOA,EAAKC,QAAQ,gBAAkB,IAKtC,GAAAC,OAAAlB,OAAAmB,EAAA,EAAAnB,CAAWe,GAAO,CAAE,CAClBK,MAAK,GAAAF,OAAKF,QAKdT,EAAc,MAQVC,EAAAC,EAAAC,cAAA,SAAOW,KAAK,OAEZD,MAAQd,EACNgB,SAAU,SAACT,GACTN,EAAcM,EAAMU,OAAOH,UAE/BZ,EAAAC,EAAAC,cAAA,UAAQC,GAAG,eAAeU,KAAK,UAAQ,iBAGzCb,EAAAC,EAAAC,cAAA,MAAIC,GAAG,kBAAkBT,EAAWsB,IAAI,SAACC,GAAI,OAC3CjB,EAAAC,EAAAC,cAAA,WACGe,EAAKL,UAGVZ,EAAAC,EAAAC,cAAA,UAAQC,GAAG,aAAae,QA1CR,WACHC,SAASC,eAAe,kBAChCC,UAAU,KAwC8B,wBC5CtCC,IAASC,WAAWJ,SAASC,eAAe,SACpDI,OACHxB,EAAAC,EAAAC,cAACF,EAAAC,EAAMwB,WAAU,KACfzB,EAAAC,EAAAC,cAACwB,EAAG","file":"static/js/main.94129af9.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport { useState } from 'react';\r\n\r\nfunction App() {\r\n  const [postgresql, setPostgresql] = useState([]);\r\n  const [inputValue, setInputValue] = useState([]);\r\n  const onPageReset = () => {\r\n    const remove = document.getElementById('query_sentence');\r\n    remove.innerHTML=\"\";\r\n  };\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    setPostgresql((current) => { \r\n      var qStr = inputValue;\r\n      // FROMDUAL 변환작업 \r\n      qStr = qStr.replace(/FROM\\s+DUAL/igs, \"\");\r\n\r\n      // 함수이름 변환작업\r\n      // qStr = qStr.작업 코드 작성하기;\r\n\r\n      return [...current, {\r\n        value: `${qStr}`, \r\n      },];\r\n\r\n    });\r\n\r\n    setInputValue(\"\");\r\n    \r\n  };\r\n\r\n  return (\r\n    <div id=\"container\">\r\n      <p id=\"title\">Query Converter</p>\r\n      <form id=\"oracle-query\" onSubmit={handleSubmit}>\r\n        <input type=\"text\" \r\n        \r\n        value ={inputValue}\r\n          onChange={(event) => {\r\n            setInputValue(event.target.value);\r\n        }} />\r\n        <button id=\"input_button\" type=\"submit\">변환</button>\r\n      </form>\r\n      \r\n      <ol id=\"query_sentence\">{postgresql.map((item) => (\r\n        <div>\r\n          {item.value}\r\n        </div>\r\n      ))}</ol>\r\n      <button id='page-reset' onClick={onPageReset}>비우기</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n"],"sourceRoot":""}
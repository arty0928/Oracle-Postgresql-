{"ast":null,"code":"var _jsxFileName = \"/Users/kimsijin/Desktop/Oracle-Postgresql-/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [postgresql, setPostgresql] = useState([]);\n  const [inputValue, setInputValue] = useState([]);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    setPostgresql(current => {\n      /* NLS_INITCAP \r\n      ORACLE SYNTAX : SELECT nls_initcap('new york') FROM dual;\r\n      POSTGRES SYNTAX : SELECT INITCAP ( 'new york' ) ;\r\n      */\n      if (/SELECT */i.test(inputValue) === true && /NLS_INITCAP */i.test(inputValue) === true) {\n        var postgresqlQuery = inputValue.split('_')[0];\n        return [...current, {\n          value: `select ${postgresqlQuery[0]};`\n        }];\n      }\n      /* DECODE */\n\n\n      if (/DECODE */i.test(inputValue) === true) {\n        var postgresqlQuery = inputValue.split('(')[1].split(')')[0];\n        var coloum, c1, result1, c2, result2, default_result;\n        console.log(\"3번째\", typeof postgresqlQuery[0]);\n        console.log(\"coloum\", typeof postgresqlQuery[3]);\n        const regex = /[^0-9]/g;\n        const result = str.replace(regex, \"\");\n        const number = parseInt(result); //3번째가 숫자가 아니라 문자면 \n        // todo: 조건2 생략시 \n\n        if (typeof postgresqlQuery[0] == String) {\n          coloum = postgresqlQuery.split(',')[0];\n          c1 = postgresqlQuery.split(',')[1];\n          result1 = postgresqlQuery.split(',')[2];\n          default_result = postgresqlQuery.split(',')[3];\n          return [...current, {\n            value: `case ${coloum} when ${c1} then ${result1} else ${default_result}\n            end FROM TRACK;`\n          }];\n        } else {\n          coloum = postgresqlQuery.split(',')[0];\n          c1 = postgresqlQuery.split(',')[1];\n          result1 = postgresqlQuery.split(',')[2];\n          c2 = postgresqlQuery.split(',')[3];\n          result2 = postgresqlQuery.split(',')[4];\n          default_result = postgresqlQuery.split(',')[5];\n          return [...current, {\n            value: `case ${coloum} when ${c1} then ${result1} when ${c2} then ${result2} else ${default_result}\n              end FROM TRACK;`\n          }];\n        }\n      }\n      /* EMPTY BLOB || EMPTY CLOB */\n\n\n      if (/EMPTY_BLOB() */i.test(inputValue) === true || /EMPTY_CLOB() */i.test(inputValue) === true) {\n        var postgresqlQuery;\n        if (/EMPTY_BLOB() */i.test(inputValue) === true) postgresqlQuery = inputValue.replace('EMPTY_BLOB()', '\"');else if (/EMPTY_CLOB() */i.test(inputValue) === true) postgresqlQuery = inputValue.replace('EMPTY_CLOB()', '\"');\n        return [...current, {\n          value: postgresqlQuery\n        }];\n      }\n      /* CURRENT_DATE */\n\n\n      if (/SELECT */i.test(inputValue) === true && /CURRENT_DATE */i.test(inputValue) === true) {\n        var postgresqlQuery = inputValue;\n        return [...current, {\n          value: 'SELECT (CURRENT_DATE + CURRENT_TIME(0))::timestamp;'\n        }];\n      }\n      /* BITAND */\n\n\n      if (/SELECT */i.test(inputValue) === true && /BITAND */i.test(inputValue) === true) //if (inputValue.includes('SELECT') && (inputValue.includes('BITAND'))) \n        {\n          var postgresqlQuery = inputValue.split('(')[1].split(')')[0];\n          return [...current, {\n            value: `select ${postgresqlQuery.split(',')[0]}&${postgresqlQuery.split(',')[1]};`\n          }];\n        }\n      /* SELECT BIN_TO_NUM */\n\n\n      if (/SELECT */i.test(inputValue) === true && /BIN_TO_NUM */i.test(inputValue) === true) //if (inputValue.includes('SELECT') && (inputValue.includes('BIN_TO_NUM'))) \n        {\n          var postgresqlQuery = inputValue.split('(')[1].split(')')[0].replace(/,/g, \"\");\n          return [...current, {\n            value: `select B'${postgresqlQuery}'::int;`\n          }];\n        }\n      /* FROMDUAL 변환작업 */\n\n\n      if (/from dual *;/i.test(inputValue) === true) {\n        var queryNotIncludeDual = inputValue.split(/FROM/i);\n        var postgresqlQuery = queryNotIncludeDual[0];\n        return [...current, {\n          value: `${postgresqlQuery}`\n        }];\n      } else return [...current, {\n        value: inputValue\n      }];\n    });\n    setInputValue(\"\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      id: \"oracle-query\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputValue,\n        onChange: event => {\n          setInputValue(event.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"\\uBCC0\\uD658\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n      children: postgresql.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: item.value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"37NLFHVVSrzA2aag2FnSYtqxRXw=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","App","postgresql","setPostgresql","inputValue","setInputValue","handleSubmit","event","preventDefault","current","test","postgresqlQuery","split","value","coloum","c1","result1","c2","result2","default_result","console","log","regex","result","str","replace","number","parseInt","String","queryNotIncludeDual","target","map","item"],"sources":["/Users/kimsijin/Desktop/Oracle-Postgresql-/src/App.js"],"sourcesContent":["import './App.css';\r\nimport { useState} from 'react';\r\n\r\nfunction App() {\r\n  const [postgresql, setPostgresql] = useState([]);\r\n  const [inputValue, setInputValue] = useState([]);\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    setPostgresql((current) => { \r\n\r\n      /* NLS_INITCAP \r\n      ORACLE SYNTAX : SELECT nls_initcap('new york') FROM dual;\r\n\r\nPOSTGRES SYNTAX : SELECT INITCAP ( 'new york' ) ;\r\n      */\r\n      if((/SELECT */i.test(inputValue) === true) && /NLS_INITCAP */i.test(inputValue) === true)\r\n      {\r\n        var postgresqlQuery = inputValue.split('_')[0];\r\n        return [...current, {\r\n           value: `select ${postgresqlQuery[0]};`, \r\n        },]; \r\n\r\n      } \r\n\r\n\r\n      /* DECODE */\r\n      if((/DECODE */i.test(inputValue) === true))\r\n      {\r\n        var postgresqlQuery = inputValue.split('(')[1].split(')')[0];\r\n        \r\n        var coloum,c1,result1,c2,result2,default_result;\r\n        \r\n        console.log(\"3번째\",typeof(postgresqlQuery[0]));\r\n        console.log(\"coloum\",typeof(postgresqlQuery[3]));\r\n        const regex = /[^0-9]/g;\r\n        const result = str.replace(regex, \"\");\r\n        const number = parseInt(result);\r\n\r\n        //3번째가 숫자가 아니라 문자면 \r\n        // todo: 조건2 생략시 \r\n        if(typeof(postgresqlQuery[0])==String)\r\n        {\r\n          coloum=postgresqlQuery.split(',')[0];\r\n          c1=postgresqlQuery.split(',')[1];\r\n          result1=postgresqlQuery.split(',')[2];\r\n          default_result=postgresqlQuery.split(',')[3];\r\n        \r\n          return [...current, {\r\n            value: `case ${coloum} when ${c1} then ${result1} else ${default_result}\r\n            end FROM TRACK;` \r\n         },];\r\n\r\n        }\r\n        else{\r\n          coloum=postgresqlQuery.split(',')[0];\r\n          c1=postgresqlQuery.split(',')[1];\r\n          result1=postgresqlQuery.split(',')[2];\r\n          c2=postgresqlQuery.split(',')[3];\r\n          result2=postgresqlQuery.split(',')[4];\r\n          default_result=postgresqlQuery.split(',')[5];\r\n        \r\n        \r\n          return [...current, {\r\n              value: `case ${coloum} when ${c1} then ${result1} when ${c2} then ${result2} else ${default_result}\r\n              end FROM TRACK;` \r\n          },];\r\n      }\r\n     }\r\n\r\n\r\n      /* EMPTY BLOB || EMPTY CLOB */\r\n      if((/EMPTY_BLOB() */i.test(inputValue) === true) || /EMPTY_CLOB() */i.test(inputValue) === true )\r\n      {\r\n        var postgresqlQuery;\r\n        if((/EMPTY_BLOB() */i.test(inputValue) === true))\r\n          postgresqlQuery = inputValue.replace('EMPTY_BLOB()','\"');\r\n          \r\n        else if((/EMPTY_CLOB() */i.test(inputValue) === true))\r\n          postgresqlQuery = inputValue.replace('EMPTY_CLOB()','\"');\r\n       \r\n       return [...current, {\r\n          value: postgresqlQuery,\r\n       },];\r\n     }\r\n\r\n      /* CURRENT_DATE */\r\n      if((/SELECT */i.test(inputValue) === true) && /CURRENT_DATE */i.test(inputValue) === true )\r\n      {\r\n       var postgresqlQuery = inputValue;\r\n       return [...current, {\r\n          value: 'SELECT (CURRENT_DATE + CURRENT_TIME(0))::timestamp;',\r\n       },];\r\n     }\r\n\r\n\r\n       /* BITAND */\r\n       if((/SELECT */i.test(inputValue) === true) && /BITAND */i.test(inputValue) === true )\r\n       //if (inputValue.includes('SELECT') && (inputValue.includes('BITAND'))) \r\n       {\r\n        var postgresqlQuery = inputValue.split('(')[1].split(')')[0];\r\n        return [...current, {\r\n           value: `select ${postgresqlQuery.split(',')[0]}&${postgresqlQuery.split(',')[1]};`, \r\n        },];\r\n      }\r\n\r\n      /* SELECT BIN_TO_NUM */\r\n      if((/SELECT */i.test(inputValue) === true) && /BIN_TO_NUM */i.test(inputValue) === true )\r\n      //if (inputValue.includes('SELECT') && (inputValue.includes('BIN_TO_NUM'))) \r\n      {\r\n        var postgresqlQuery = inputValue.split('(')[1].split(')')[0].replace(/,/g,\"\"); \r\n        return [...current, {\r\n           value: `select B'${postgresqlQuery}'::int;`, \r\n        },];\r\n      }\r\n\r\n      /* FROMDUAL 변환작업 */\r\n      if (/from dual *;/i.test(inputValue) === true) {\r\n        var queryNotIncludeDual = inputValue.split(/FROM/i);\r\n        var postgresqlQuery = queryNotIncludeDual[0];\r\n        return [...current, {\r\n          value: `${postgresqlQuery}`, \r\n        },];\r\n      }\r\n      else return [...current, {\r\n        value: inputValue, \r\n      },];\r\n      \r\n    });\r\n\r\n    setInputValue(\"\");\r\n    \r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form id=\"oracle-query\" onSubmit={handleSubmit}>\r\n        <input type=\"text\" value ={inputValue}\r\n          onChange={(event) => {\r\n            setInputValue(event.target.value);\r\n        }} />\r\n        <button type=\"submit\">변환</button>\r\n      </form>\r\n      \r\n      <ol>{postgresql.map((item) => (\r\n        <div>\r\n          <span>{item.value}</span>\r\n        </div>\r\n      ))}</ol>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
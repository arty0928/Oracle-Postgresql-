{"ast":null,"code":"var _jsxFileName = \"/Users/kimsijin/Desktop/oposet/Oracle-Postgresql-/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [postgresql, setPostgresql] = useState([]);\n  const [inputValue, setInputValue] = useState([]);\n\n  const onReset = () => {\n    setInputValue(\"\");\n  };\n\n  const onPageReset = () => {\n    const remove = document.getElementById('query_sentence');\n    remove.innerHTML = \"\";\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    setPostgresql(current => {\n      if (/ RATIO_TO_REPORT */i.test(inputValue)) {\n        var RTRquery = inputValue.split('(')[1].split(')')[0];\n        var RTRquery1 = inputValue.split(') ')[1].split('ORACLE')[0];\n        return [...current, {\n          value: `select(${RTRquery}), sum(${RTRquery}) / sum(sum(${RTRquery})) ${RTRquery1} track group by ${RTRquery}`\n        }];\n      } // PERSCENT_RANK & RPAD & ROW_NUMBER & ntile & RANK & SCN_TO_TIMESTAMP\n\n\n      if (/ORACLE. */i.test(inputValue) === true) {\n        var p1erRQuery = inputValue.split('ORACLE')[0];\n        var p1erRQuery1 = inputValue.split('.')[1];\n        return [...current, {\n          value: `${p1erRQuery}${p1erRQuery1}`\n        }];\n      } //NVL\n\n\n      if (/SELECT */i.test(inputValue) === true && /NVL */i.test(inputValue) === true) {\n        var nvlQuery = inputValue.split('NVL')[0];\n        var nvlQuery2 = inputValue.split('NVL')[1].split('ORACLE')[0];\n        var nvlQuery3 = inputValue.split('ORACLE.')[1];\n        return [...current, {\n          value: `${nvlQuery} coalesce ${nvlQuery2}${nvlQuery3}`\n        }];\n      } //RAWTOHEX\n\n\n      if (/SELECT */i.test(inputValue) === true && /RAWTOHEX */i.test(inputValue) === true) {\n        var RthQuery = inputValue.split('(')[1].split(')')[0];\n        return [...current, {\n          value: `SELECT  encode(${RthQuery},'hex');`\n        }];\n      } //SESSIONTIMEZONE\n\n\n      if (/SELECT */i.test(inputValue) === true && /SESSIONTIMEZONE */i.test(inputValue) === true) {\n        var stzQuery = inputValue.split('SESSION')[1].split(' FROM')[0];\n        return [...current, {\n          value: `SELECT current_setting ('${stzQuery}') ;`\n        }];\n      } // REMAINDER\n\n\n      if (/SELECT */i.test(inputValue) === true && /REMAINDER */i.test(inputValue) === true) {\n        var remQuery = inputValue.split('(')[1].split(')')[0];\n        var remQuery1 = inputValue.split('SELECT ')[1].split(' (')[0];\n        return [...current, {\n          value: `SELECT mod (${remQuery}) as \"${remQuery1}\";`\n        }];\n      }\n      /* NLS_INITCAP & NLS_LOWER & NLS_UPPER\r\n      */\n\n\n      if (/SELECT */i.test(inputValue) === true && /NLS_ */i.test(inputValue) === true) {\n        var initQuery = inputValue.split('_')[1].split('FROM')[0];\n        return [...current, {\n          value: `select ${initQuery};`\n        }];\n      } // PERSCENT_RANK & RPAD & ROW_NUMBER & ntile & RANK\n      //if((/PERCENT_RANK */i.test(inputValue) === true || /RPAD */i.test(inputValue) === true \n      //|| /ROW_NUMBER */i.test(inputValue) === true || /ntile */i.test(inputValue) === true \n      //|| /RANK */i.test(inputValue) === true))\n      //{\n      //  var perRQuery = inputValue.split('ORACLE')[0];\n      //  var perRQuery1 = inputValue.split('.')[1];\n      //  return [...current, {\n      //     value: `${perRQuery}${perRQuery1}`, \n      //  },]; \n      //}\n\n      /* EMPTY BLOB || EMPTY CLOB */\n\n\n      if (/EMPTY_BLOB() */i.test(inputValue) === true || /EMPTY_CLOB() */i.test(inputValue) === true) {\n        var postgresqlQuery;\n        if (/EMPTY_BLOB() */i.test(inputValue) === true) postgresqlQuery = inputValue.replace('EMPTY_BLOB()', '\"');else if (/EMPTY_CLOB() */i.test(inputValue) === true) postgresqlQuery = inputValue.replace('EMPTY_CLOB()', '\"');\n        return [...current, {\n          value: postgresqlQuery\n        }];\n      }\n      /* CURRENT_DATE */\n\n\n      if (/SELECT */i.test(inputValue) === true && /CURRENT_DATE */i.test(inputValue) === true) {\n        var postgresqlQuery = inputValue;\n        return [...current, {\n          value: 'SELECT (CURRENT_DATE + CURRENT_TIME(0))::timestamp;'\n        }];\n      }\n      /* BITAND */\n\n\n      if (/SELECT */i.test(inputValue) === true && /BITAND */i.test(inputValue) === true) //if (inputValue.includes('SELECT') && (inputValue.includes('BITAND'))) \n        {\n          var postgresqlQuery = inputValue.split('(')[1].split(')')[0];\n          return [...current, {\n            value: `select ${postgresqlQuery.split(',')[0]}&${postgresqlQuery.split(',')[1]};`\n          }];\n        }\n      /* SELECT BIN_TO_NUM */\n\n\n      if (/SELECT */i.test(inputValue) === true && /BIN_TO_NUM */i.test(inputValue) === true) //if (inputValue.includes('SELECT') && (inputValue.includes('BIN_TO_NUM'))) \n        {\n          var postgresqlQuery = inputValue.split('(')[1].split(')')[0].replace(/,/g, \"\");\n          return [...current, {\n            value: `select B'${postgresqlQuery}'::int;`\n          }];\n        }\n      /* FROMDUAL 변환작업 */\n\n\n      if (/from dual *;/i.test(inputValue) === true) {\n        var queryNotIncludeDual = inputValue.split(/FROM/i);\n        var postgresqlQuery = queryNotIncludeDual[0];\n        return [...current, {\n          value: `${postgresqlQuery};`\n        }];\n      } else return [...current, {\n        value: inputValue\n      }];\n    });\n    setInputValue(\"\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      id: \"title\",\n      children: \"Query Converter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      id: \"oracle-query\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputValue,\n        onChange: event => {\n          setInputValue(event.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"\\uBCC0\\uD658\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onReset,\n        children: \"\\uCD08\\uAE30\\uD654\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n      id: \"query_sentence\",\n      children: postgresql.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: item.value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onPageReset,\n      children: \"\\uBE44\\uC6B0\\uAE30\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"37NLFHVVSrzA2aag2FnSYtqxRXw=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","App","postgresql","setPostgresql","inputValue","setInputValue","onReset","onPageReset","remove","document","getElementById","innerHTML","handleSubmit","event","preventDefault","current","test","RTRquery","split","RTRquery1","value","p1erRQuery","p1erRQuery1","nvlQuery","nvlQuery2","nvlQuery3","RthQuery","stzQuery","remQuery","remQuery1","initQuery","postgresqlQuery","replace","queryNotIncludeDual","target","map","item"],"sources":["/Users/kimsijin/Desktop/oposet/Oracle-Postgresql-/src/App.js"],"sourcesContent":["import './App.css';\r\nimport { useState} from 'react';\r\n\r\nfunction App() {\r\n  const [postgresql, setPostgresql] = useState([]);\r\n  const [inputValue, setInputValue] = useState([]);\r\n\r\n  const onReset = () => {\r\n    setInputValue(\"\");\r\n  };\r\n  const onPageReset = () => {\r\n    const remove = document.getElementById('query_sentence');\r\n    remove.innerHTML=\"\";\r\n  };\r\n    \r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    setPostgresql((current) => {\r\n      \r\n    if(/ RATIO_TO_REPORT */i.test(inputValue))\r\n    {\r\n      var RTRquery = inputValue.split('(')[1].split(')')[0];\r\n      var RTRquery1 = inputValue.split(') ')[1].split('ORACLE')[0];\r\n      \r\n      return [...current, {\r\n        value: `select(${RTRquery}), sum(${RTRquery}) / sum(sum(${RTRquery})) ${RTRquery1} track group by ${RTRquery}`, \r\n     },]; \r\n\r\n    }\r\n\r\n      // PERSCENT_RANK & RPAD & ROW_NUMBER & ntile & RANK & SCN_TO_TIMESTAMP\r\n      if(/ORACLE. */i.test(inputValue) === true)\r\n      {\r\n        var p1erRQuery = inputValue.split('ORACLE')[0];\r\n        var p1erRQuery1 = inputValue.split('.')[1];\r\n        return [...current, {\r\n           value: `${p1erRQuery}${p1erRQuery1}`, \r\n        },]; \r\n      }\r\n\r\n      //NVL\r\n      if((/SELECT */i.test(inputValue) === true) && /NVL */i.test(inputValue) === true )\r\n      {\r\n        var nvlQuery = inputValue.split('NVL')[0];\r\n        var nvlQuery2 = inputValue.split('NVL')[1].split('ORACLE')[0]\r\n        var nvlQuery3 = inputValue.split('ORACLE.')[1];\r\n        return [...current, {\r\n           value: `${nvlQuery} coalesce ${nvlQuery2}${nvlQuery3}`, \r\n        },]; \r\n\r\n      }         \r\n\r\n      //RAWTOHEX\r\n      if((/SELECT */i.test(inputValue) === true) && /RAWTOHEX */i.test(inputValue) === true )\r\n      {\r\n        var RthQuery = inputValue.split('(')[1].split(')')[0];\r\n        return [...current, {\r\n           value: `SELECT  encode(${RthQuery},'hex');`, \r\n        },]; \r\n\r\n      }\r\n\r\n\r\n\r\n      //SESSIONTIMEZONE\r\n      if((/SELECT */i.test(inputValue) === true) && /SESSIONTIMEZONE */i.test(inputValue) === true )\r\n      {\r\n        var stzQuery = inputValue.split('SESSION')[1].split(' FROM')[0];\r\n        return [...current, {\r\n           value: `SELECT current_setting ('${stzQuery}') ;`, \r\n        },]; \r\n\r\n      }\r\n\r\n\r\n      // REMAINDER\r\n      if((/SELECT */i.test(inputValue) === true) && /REMAINDER */i.test(inputValue) === true )\r\n      {\r\n        var remQuery = inputValue.split('(')[1].split(')')[0];\r\n        var remQuery1 = inputValue.split('SELECT ')[1].split(' (')[0];\r\n        return [...current, {\r\n           value: `SELECT mod (${remQuery}) as \"${remQuery1}\";`, \r\n        },]; \r\n\r\n      }\r\n\r\n      /* NLS_INITCAP & NLS_LOWER & NLS_UPPER\r\n      */\r\n      if((/SELECT */i.test(inputValue) === true) && /NLS_ */i.test(inputValue) === true)\r\n      {\r\n        var initQuery = inputValue.split('_')[1].split('FROM')[0];\r\n        return [...current, {\r\n           value: `select ${initQuery};`, \r\n        },]; \r\n\r\n      }\r\n      // PERSCENT_RANK & RPAD & ROW_NUMBER & ntile & RANK\r\n      \r\n      //if((/PERCENT_RANK */i.test(inputValue) === true || /RPAD */i.test(inputValue) === true \r\n      //|| /ROW_NUMBER */i.test(inputValue) === true || /ntile */i.test(inputValue) === true \r\n      //|| /RANK */i.test(inputValue) === true))\r\n      //{\r\n      //  var perRQuery = inputValue.split('ORACLE')[0];\r\n      //  var perRQuery1 = inputValue.split('.')[1];\r\n      //  return [...current, {\r\n      //     value: `${perRQuery}${perRQuery1}`, \r\n      //  },]; \r\n\r\n      //}\r\n      \r\n\r\n      /* EMPTY BLOB || EMPTY CLOB */\r\n      if((/EMPTY_BLOB() */i.test(inputValue) === true) || /EMPTY_CLOB() */i.test(inputValue) === true )\r\n      {\r\n        var postgresqlQuery;\r\n        if((/EMPTY_BLOB() */i.test(inputValue) === true))\r\n          postgresqlQuery = inputValue.replace('EMPTY_BLOB()','\"');\r\n          \r\n        else if((/EMPTY_CLOB() */i.test(inputValue) === true))\r\n          postgresqlQuery = inputValue.replace('EMPTY_CLOB()','\"');\r\n       \r\n       return [...current, {\r\n          value: postgresqlQuery,\r\n       },];\r\n     }\r\n\r\n      /* CURRENT_DATE */\r\n      if((/SELECT */i.test(inputValue) === true) && /CURRENT_DATE */i.test(inputValue) === true )\r\n      {\r\n       var postgresqlQuery = inputValue;\r\n       return [...current, {\r\n          value: 'SELECT (CURRENT_DATE + CURRENT_TIME(0))::timestamp;',\r\n       },];\r\n     }\r\n\r\n\r\n       /* BITAND */\r\n       if((/SELECT */i.test(inputValue) === true) && /BITAND */i.test(inputValue) === true )\r\n       //if (inputValue.includes('SELECT') && (inputValue.includes('BITAND'))) \r\n       {\r\n        var postgresqlQuery = inputValue.split('(')[1].split(')')[0];\r\n        return [...current, {\r\n           value: `select ${postgresqlQuery.split(',')[0]}&${postgresqlQuery.split(',')[1]};`, \r\n        },];\r\n      }\r\n\r\n      /* SELECT BIN_TO_NUM */\r\n      if((/SELECT */i.test(inputValue) === true) && /BIN_TO_NUM */i.test(inputValue) === true )\r\n      //if (inputValue.includes('SELECT') && (inputValue.includes('BIN_TO_NUM'))) \r\n      {\r\n        var postgresqlQuery = inputValue.split('(')[1].split(')')[0].replace(/,/g,\"\"); \r\n        return [...current, {\r\n           value: `select B'${postgresqlQuery}'::int;`, \r\n        },];\r\n      }\r\n\r\n      /* FROMDUAL 변환작업 */\r\n      if (/from dual *;/i.test(inputValue) === true) {\r\n        var queryNotIncludeDual = inputValue.split(/FROM/i);\r\n        var postgresqlQuery = queryNotIncludeDual[0];\r\n        return [...current, {\r\n          value: `${postgresqlQuery};`, \r\n        },];\r\n      }\r\n      else return [...current, {\r\n        value: inputValue, \r\n      },];\r\n      \r\n    });\r\n\r\n    setInputValue(\"\");\r\n    \r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <p id=\"title\">Query Converter</p>\r\n      <form id=\"oracle-query\" onSubmit={handleSubmit}>\r\n        <input type=\"text\" \r\n        \r\n        value ={inputValue}\r\n          onChange={(event) => {\r\n            setInputValue(event.target.value);\r\n        }} />\r\n        <button type=\"submit\">변환</button>\r\n        <button onClick={onReset}>초기화</button>\r\n      </form>\r\n      \r\n      <ol id=\"query_sentence\">{postgresql.map((item) => (\r\n        <div>\r\n          {item.value}\r\n        </div>\r\n      ))}</ol>\r\n      <button onClick={onPageReset}>비우기</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}